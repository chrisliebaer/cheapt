//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "message_cache")]
pub struct Model {
	#[sea_orm(primary_key)]
	pub id: u64,
	#[sea_orm(unique)]
	pub discord_message_id: u64,
	pub ref_discord_message_id: Option<u64>,
	#[sea_orm(unique)]
	pub discord_user_id: u64,
	pub content: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(
		belongs_to = "Entity",
		from = "Column::RefDiscordMessageId",
		to = "Column::DiscordMessageId",
		on_update = "Cascade",
		on_delete = "Cascade"
	)]
	SelfRef,
	#[sea_orm(
		belongs_to = "super::user::Entity",
		from = "Column::DiscordUserId",
		to = "super::user::Column::DiscordUserId",
		on_update = "Cascade",
		on_delete = "Cascade"
	)]
	User,
}

impl Related<super::user::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::User.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
